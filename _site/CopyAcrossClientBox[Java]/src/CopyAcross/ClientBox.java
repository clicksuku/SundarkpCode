/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package CopyAcross;

import com.jcraft.jsch.*;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.util.Vector;
import java.util.logging.Level;
import javax.swing.JFileChooser;


/**
 *
 * @author sundarkp
 */
public class ClientBox extends javax.swing.JFrame {

    private static String _sftpHost;
    private static int _sftpPort;
    private static String _sftpUser;
    private static String _sftpPwd;
    
    private static String _sftpLocalFileDir;
    private static String _sftpRemoteDirectory;
    private static String _clipBoardText;
    
    /**
     * Creates new form ClientBox
     */
    public ClientBox() {
        initComponents();
        
        _sftpHost = "10.223.9.122";
        _sftpUser = "symuser";
        _sftpPwd = "symqa@123";
        _sftpRemoteDirectory = "";   
        _sftpLocalFileDir = "";
        
        setLocationRelativeTo(null);   
        RemoteFilesList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "[Press 'Get Files']" }));
        
        SettingsAlert_Success.setVisible(false);
        SettingsAlert_Fail.setVisible(false);        
        
        ClipBdAlert_Success.setVisible(false);
        ClipBdAlert_Fail.setVisible(false);
        
        FileAlert_Success.setVisible(false);
        FileAlert_Fail.setVisible(false);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tabs = new javax.swing.JTabbedPane();
        SettingsPanel = new javax.swing.JPanel();
        SFTPServer = new javax.swing.JTextField();
        UserName = new javax.swing.JTextField();
        SetProps = new javax.swing.JButton();
        Password = new javax.swing.JPasswordField();
        RemoteDir = new javax.swing.JTextField();
        SettingsAlert_Fail = new javax.swing.JLabel();
        SettingsAlert_Success = new javax.swing.JLabel();
        SendPanel = new javax.swing.JPanel();
        SendText = new javax.swing.JButton();
        ReadText = new javax.swing.JButton();
        ClipBdAlert_Fail = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClipBdContent = new javax.swing.JTextArea();
        ClipBdAlert_Success = new javax.swing.JLabel();
        ReceivePanel = new javax.swing.JPanel();
        Select = new javax.swing.JButton();
        SendFile = new javax.swing.JButton();
        ReceiveFile = new javax.swing.JButton();
        LocalFileName = new javax.swing.JTextField();
        SelectAFolder = new javax.swing.JButton();
        chooseFile = new javax.swing.JFileChooser();
        LocalDir = new javax.swing.JTextField();
        FileAlert_Success = new javax.swing.JLabel();
        FileAlert_Fail = new javax.swing.JLabel();
        RemoteFilesList = new javax.swing.JComboBox();
        Refresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Copy Across Tool");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("MainPage");
        setResizable(false);

        SettingsPanel.setBackground(new java.awt.Color(177, 177, 244));
        SettingsPanel.setName("Panel");
        SettingsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SFTPServer.setText("10.223.9.122");
        SFTPServer.setToolTipText("SFTP Server");
        SFTPServer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SFTPServerFocusGained(evt);
            }
        });
        SettingsPanel.add(SFTPServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 75, 133, -1));

        UserName.setText("symuser");
        UserName.setToolTipText("User Name");
        UserName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                UserNameFocusGained(evt);
            }
        });
        SettingsPanel.add(UserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 75, 139, -1));

        SetProps.setText("SetProps");
        SetProps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetPropsActionPerformed(evt);
            }
        });
        SettingsPanel.add(SetProps, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 75, -1, 58));

        Password.setText("symqa@123");
        Password.setToolTipText("symqa@123");
        SettingsPanel.add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 113, 133, -1));

        RemoteDir.setForeground(new java.awt.Color(191, 205, 219));
        RemoteDir.setText("/Temp/[Your SFTP folder name]/CrossCopy/");
        RemoteDir.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RemoteDirFocusGained(evt);
            }
        });
        SettingsPanel.add(RemoteDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 420, -1));

        SettingsAlert_Fail.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        SettingsAlert_Fail.setForeground(new java.awt.Color(220, 84, 111));
        SettingsAlert_Fail.setText("* May be Wrong Settings. Please check. Or call this guy, sundarakumar_padmana.");
        SettingsPanel.add(SettingsAlert_Fail, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        SettingsAlert_Success.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        SettingsAlert_Success.setForeground(new java.awt.Color(255, 255, 255));
        SettingsAlert_Success.setText("* Done");
        SettingsPanel.add(SettingsAlert_Success, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 57, -1));

        Tabs.addTab("Settings", SettingsPanel);

        SendPanel.setBackground(new java.awt.Color(194, 183, 183));

        SendText.setText("Send Text");
        SendText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendTextActionPerformed(evt);
            }
        });

        ReadText.setBackground(new java.awt.Color(255, 255, 255));
        ReadText.setText("Receive Text");
        ReadText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ReadText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadTextActionPerformed(evt);
            }
        });

        ClipBdAlert_Fail.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        ClipBdAlert_Fail.setForeground(new java.awt.Color(255, 0, 0));
        ClipBdAlert_Fail.setText("* May be Wrong Settings. Please check. Or call this guy, sundarakumar_padmana.");

        ClipBdContent.setColumns(20);
        ClipBdContent.setRows(5);
        jScrollPane2.setViewportView(ClipBdContent);

        ClipBdAlert_Success.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        ClipBdAlert_Success.setForeground(new java.awt.Color(51, 102, 255));
        ClipBdAlert_Success.setText("* Done");

        javax.swing.GroupLayout SendPanelLayout = new javax.swing.GroupLayout(SendPanel);
        SendPanel.setLayout(SendPanelLayout);
        SendPanelLayout.setHorizontalGroup(
            SendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SendPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(SendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClipBdAlert_Fail, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SendPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SendText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ReadText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(ClipBdAlert_Success, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        SendPanelLayout.setVerticalGroup(
            SendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SendPanelLayout.createSequentialGroup()
                .addGroup(SendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SendPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SendPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(SendText, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReadText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(ClipBdAlert_Success)
                .addGap(8, 8, 8)
                .addComponent(ClipBdAlert_Fail)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        Tabs.addTab("Text", SendPanel);

        ReceivePanel.setBackground(new java.awt.Color(228, 228, 204));
        ReceivePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Select.setText("...");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });
        ReceivePanel.add(Select, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 20, 30, -1));

        SendFile.setText("Send File");
        SendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendFileActionPerformed(evt);
            }
        });
        ReceivePanel.add(SendFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 190, -1));

        ReceiveFile.setText("Receive File");
        ReceiveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveFileActionPerformed(evt);
            }
        });
        ReceivePanel.add(ReceiveFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 190, -1));

        LocalFileName.setForeground(new java.awt.Color(191, 205, 219));
        LocalFileName.setText("[Select Local file to transfer]");
        ReceivePanel.add(LocalFileName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 420, -1));

        SelectAFolder.setText("...");
        SelectAFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAFolderActionPerformed(evt);
            }
        });
        ReceivePanel.add(SelectAFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, 30, -1));
        ReceivePanel.add(chooseFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, 30, 10));

        LocalDir.setForeground(new java.awt.Color(191, 205, 219));
        LocalDir.setText("[Select a Local Directory]");
        LocalDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalDirActionPerformed(evt);
            }
        });
        ReceivePanel.add(LocalDir, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 420, -1));

        FileAlert_Success.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        FileAlert_Success.setForeground(new java.awt.Color(51, 102, 255));
        FileAlert_Success.setText("* Done");
        ReceivePanel.add(FileAlert_Success, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        FileAlert_Fail.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        FileAlert_Fail.setForeground(new java.awt.Color(255, 0, 0));
        FileAlert_Fail.setText("* May be Wrong Settings. Please check. Or call this guy, sundarakumar_padmana.");
        ReceivePanel.add(FileAlert_Fail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        RemoteFilesList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ReceivePanel.add(RemoteFilesList, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 350, -1));

        Refresh.setText("Get Files");
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        ReceivePanel.add(Refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 100, -1));

        Tabs.addTab("Files", ReceivePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tabs)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendTextActionPerformed
     
        CopyText(_sftpRemoteDirectory);
    }//GEN-LAST:event_SendTextActionPerformed

    private void SFTPServerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SFTPServerFocusGained
        
        if("SFTP server".equals(SFTPServer.getText()))
            SFTPServer.setText("");
    }//GEN-LAST:event_SFTPServerFocusGained

    private void UserNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_UserNameFocusGained
        if("User Name".equals(UserName.getText()))
            UserName.setText("");
    }//GEN-LAST:event_UserNameFocusGained

    private void RemoteDirFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RemoteDirFocusGained
            if("Remote dir in server like /Temp/SundaraKumar_Padmanabhan/CrossCopy/Clipboard/".equals(RemoteDir.getText()))
                 RemoteDir.setText("");
            RemoteDir.setForeground(new Color(0,0,0));
    }//GEN-LAST:event_RemoteDirFocusGained

    private void SetPropsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetPropsActionPerformed
        if((RemoteDir.getText().equals(""))||(UserName.getText().equals(""))
                ||(Password.getText().equals(""))||(SFTPServer.getText().equals("")))
        {
            SettingsAlert_Fail.setVisible(true);
            return;
        }
        
        SettingsAlert_Success.setVisible(true);
        SettingsAlert_Fail.setVisible(false);
        
        _sftpHost = SFTPServer.getText();
        _sftpUser = UserName.getText();
        _sftpPwd = Password.getText();
        _sftpRemoteDirectory = RemoteDir.getText();
        
    }//GEN-LAST:event_SetPropsActionPerformed

    private void ReadTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadTextActionPerformed
        RetrieveText(_sftpRemoteDirectory);
    }//GEN-LAST:event_ReadTextActionPerformed

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed

        LocalFileName.setForeground(new Color(0,0,0));
        chooseFile.showOpenDialog(this);
        
        File selFile = chooseFile.getSelectedFile();
        String filePath = selFile.getAbsolutePath();
        LocalFileName.setText(filePath);        
    }//GEN-LAST:event_SelectActionPerformed

    private void SendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendFileActionPerformed
        try {
                String filePath = LocalFileName.getText();
                if(filePath.equals(""))
                {
                    FileAlert_Success.setVisible(false);
                    FileAlert_Fail.setVisible(true);        
                    return;
                }           
                SendFile(filePath, _sftpRemoteDirectory);
                FileAlert_Success.setVisible(true);
                FileAlert_Fail.setVisible(false);        
            } 
            catch (FileNotFoundException ex) 
            {
                FileAlert_Success.setVisible(false);
                FileAlert_Fail.setVisible(true);        
                java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(Level.SEVERE, null, ex);                
            }
    }//GEN-LAST:event_SendFileActionPerformed

    private void ReceiveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveFileActionPerformed
        try 
        {
            if(RemoteFilesList.getItemCount() == 0)
            {
                FileAlert_Success.setVisible(false);
                FileAlert_Fail.setVisible(true);        
                return;
            }
            ReceiveFile(_sftpRemoteDirectory);
        } 
        catch (FileNotFoundException ex) 
        {
            FileAlert_Success.setVisible(false);
            FileAlert_Fail.setVisible(true);        
            java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ReceiveFileActionPerformed

    private void SelectAFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAFolderActionPerformed
        LocalDir.setText("");
        LocalDir.setForeground(new Color(0,0,0));        
        
        chooseFile.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);        
        chooseFile.setAcceptAllFileFilterUsed(false);
        
        File folder = null;
        
        if(chooseFile.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            folder = chooseFile.getSelectedFile();
        }
        
        String folderPath = folder.getAbsolutePath();
        LocalDir.setText(folderPath);
    }//GEN-LAST:event_SelectAFolderActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;	
        
        try                
        {      
            JSch jsch = new JSch();
            session = jsch.getSession(_sftpUser, _sftpHost);
            session.setPassword(_sftpPwd);			
            java.util.Properties config = new java.util.Properties();			
            config.put("StrictHostKeyChecking","no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;

            if(!_sftpRemoteDirectory.equals(""))
                    channelSftp.cd(_sftpRemoteDirectory);

            Vector<ChannelSftp.LsEntry> fileList = channelSftp.ls(_sftpRemoteDirectory);                           
            RemoteFilesList.removeAllItems();
            
            for(int index=0; index<fileList.size();index++)
            {
                ChannelSftp.LsEntry file = fileList.elementAt(index);                
                String fileName = file.getFilename();
                                               
                if(file.getAttrs().isDir()||file.getAttrs().isLink() || file.getFilename().equals("clipBoard.rtf"))
                {
                    continue;
                }
                
                RemoteFilesList.addItem(fileName);
            }            
            
        }
        catch(JSchException | SftpException   ex)
        {
        }
        catch(Exception ex)
        {
            String err = ex.getMessage();
        }
        finally
        {
            channel.disconnect();
            session.disconnect();
        }  
    }//GEN-LAST:event_RefreshActionPerformed

    private void LocalDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalDirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LocalDirActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientBox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ClientBox().setVisible(true);
            }
        });
    }
    
    //Private Methods
    
    private boolean CopyText(String remoteDirPath)
    {          		
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;	
        
        try                
        {      
            JSch jsch = new JSch();
            session = jsch.getSession(_sftpUser, _sftpHost);
            session.setPassword(_sftpPwd);			
            java.util.Properties config = new java.util.Properties();			
            config.put("StrictHostKeyChecking","no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;

            if(null != remoteDirPath)
                    channelSftp.cd(remoteDirPath);

            _clipBoardText = ClipBdContent.getText();                 

            int mode = ChannelSftp.OVERWRITE;                
            InputStream in = new ByteArrayInputStream(_clipBoardText.getBytes("UTF-8"));                
            channelSftp.put(in, "clipBoard.rtf", mode);    
            
            ClipBdAlert_Fail.setVisible(false);
            ClipBdAlert_Success.setVisible(true);
            return true;
        }
        catch(JSchException | SftpException | UnsupportedEncodingException ex)
        {
            ClipBdAlert_Fail.setVisible(true);
            return false;
        }
        finally
        {
            channel.disconnect();
            session.disconnect();
        }        
    }
    
    private boolean RetrieveText(String remoteDirPath)
    {    
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;	

        try                
        {            
            JSch jsch = new JSch();
            session = jsch.getSession(_sftpUser, _sftpHost);
            session.setPassword(_sftpPwd);			
            java.util.Properties config = new java.util.Properties();			
            config.put("StrictHostKeyChecking","no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;

            if(null != remoteDirPath)
                    channelSftp.cd(remoteDirPath);

            
            ByteArrayOutputStream  out = new ByteArrayOutputStream();
            channelSftp.get("clipBoard.rtf", out);
            InputStream in = new ByteArrayInputStream(out.toByteArray());
            
            BufferedReader br 	= new BufferedReader(new InputStreamReader(in)); 
            StringBuilder sb = new StringBuilder();
 
            String line;
            while ((line = br.readLine()) != null) {
    		sb.append(line);
            }             
                    
            
            String content = sb.toString();
            ClipBdContent.setText(content);
                        
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Clipboard clipboard = toolkit.getSystemClipboard();
            StringSelection strSel = new StringSelection(content);
            clipboard.setContents(strSel, null);
            
            ClipBdAlert_Success.setVisible(true);
            ClipBdAlert_Fail.setVisible(false);
            return true;
            
        }
        catch(JSchException | SftpException | java.io.IOException ex)
        {
            ClipBdAlert_Fail.setVisible(true);
            return false;
        }
        finally
        {
            channel.disconnect();
            session.disconnect();
        }
        
    }
    
    private boolean SendFile(String localFile, String remoteDirPath) throws FileNotFoundException
    {          		
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;	
        try                
        {     

            JSch jsch = new JSch();
            session = jsch.getSession(_sftpUser, _sftpHost);
            session.setPassword(_sftpPwd);			
            java.util.Properties config = new java.util.Properties();			
            config.put("StrictHostKeyChecking","no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;

            if(null != remoteDirPath)
                    channelSftp.cd(remoteDirPath);
            
            int mode = ChannelSftp.OVERWRITE;  
            File f = new File(localFile);  
            String remoteFileName = f.getName();
            channelSftp.put(new FileInputStream(f), remoteFileName, mode);                                   
                        
            FileAlert_Success.setVisible(true);
            FileAlert_Fail.setVisible(false);   
            return true;
        }
        catch(JSchException | SftpException  ex)
        {
            FileAlert_Success.setVisible(false);
            FileAlert_Fail.setVisible(true);        
            return false;
        }
        finally
        {
            channel.disconnect();
            session.disconnect();         
        }
    }
    
    private boolean ReceiveFile(String remoteDirPath) throws FileNotFoundException
    {          		
        Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;	
        
        try                
        {
            JSch jsch = new JSch();
            session = jsch.getSession(_sftpUser, _sftpHost);
            session.setPassword(_sftpPwd);			
            java.util.Properties config = new java.util.Properties();			
            config.put("StrictHostKeyChecking","no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp)channel;

            if(null != remoteDirPath)
                    channelSftp.cd(remoteDirPath);

            
            String remoteFileName = RemoteFilesList.getSelectedItem().toString();
            
            if(remoteFileName.equals(""))
            {
                return false;
            }
            
            String localDir = LocalDir.getText();
            String localFilePath = localDir + "\\" + remoteFileName;                           
            
            channelSftp.get(remoteFileName, localFilePath);
            channelSftp.rm(remoteFileName);                
                                                
            FileAlert_Success.setVisible(true);
            FileAlert_Fail.setVisible(false);        
            return true;
        }
        catch(JSchException | SftpException ex)
        {
            FileAlert_Success.setVisible(false);
            FileAlert_Fail.setVisible(true);        
            return false;
        }
        finally
        {
            channel.disconnect();
            session.disconnect();    
        }            
        
    }  
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClipBdAlert_Fail;
    private javax.swing.JLabel ClipBdAlert_Success;
    private javax.swing.JTextArea ClipBdContent;
    private javax.swing.JLabel FileAlert_Fail;
    private javax.swing.JLabel FileAlert_Success;
    private javax.swing.JTextField LocalDir;
    private javax.swing.JTextField LocalFileName;
    private javax.swing.JPasswordField Password;
    private javax.swing.JButton ReadText;
    private javax.swing.JButton ReceiveFile;
    private javax.swing.JPanel ReceivePanel;
    private javax.swing.JButton Refresh;
    private javax.swing.JTextField RemoteDir;
    private javax.swing.JComboBox RemoteFilesList;
    private javax.swing.JTextField SFTPServer;
    private javax.swing.JButton Select;
    private javax.swing.JButton SelectAFolder;
    private javax.swing.JButton SendFile;
    private javax.swing.JPanel SendPanel;
    private javax.swing.JButton SendText;
    private javax.swing.JButton SetProps;
    private javax.swing.JLabel SettingsAlert_Fail;
    private javax.swing.JLabel SettingsAlert_Success;
    private javax.swing.JPanel SettingsPanel;
    private javax.swing.JTabbedPane Tabs;
    private javax.swing.JTextField UserName;
    private javax.swing.JFileChooser chooseFile;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
